x = "import os import sys import psycopg2 from sqlalchemy import Column, String, Integer, Numeric, Date sys.path.append('../') from helpers.database import db_connection as db sys.path.append(os.path.join(str(os.getenv(HOME)), 'python_lib', 'conf_fo')) import global_configuration"
x1 = "con_yml_dict = {'db_user': global_configuration.DwhPsql.db_user, 'db_passwd': global_configuration.DwhPsql.db_passwd, 'db_name': global_configuration.DwhPsql.db_name, 'db_host': global_configuration.DwhPsql.db_host, 'db_port': int(global_configuration.DwhPsql.db_port)} db_conn = db.DBConnection(con_yml_dict, schema=global_configuration.AdvancedMeasurement.schema)"
x2 = "conn = psycopg2.connect(dbname=global_configuration.DwhPsql.db_name, user=global_configuration.DwhPsql.db_user, password=global_configuration.DwhPsql.db_passwd, host=global_configuration.DwhPsql.db_host, port=global_configuration.DwhPsql.db_port) common_columns = ['id', 'brand']"
x3 = "class CommonBase7Days(db_conn.get_base()):__abstract__ = True id = Column(String(32), primary_key=True) brand = Column(String(2)) report_date = Column(Date) campaign_name = Column(String(200)) site_name = Column(String(50)) publisher_name = Column(String(50)) placement_name = Column(String(200)) ad_set_name = Column(String(200)) ad_name = Column(String(500)) external_campaign_id = Column(String(200)) external_placement_id = Column(String(200)) external_ad_id = Column(String(500)) external_site_id = Column(String(100)) external_ad_set_id = Column(String(200)) impressions = Column(Integer) clicks = Column(Integer) cost = Column(Numeric(scale=2, precision=10, asdecimal=True)) conversion_ec = Column(Numeric(scale=8, precision=15, asdecimal=True)) conversion_lc = Column(Integer)"
x4 = "@staticmethod def calculate_primary_key(row, brand): return db_conn.get_hash_id(brand, row['report_date'], row['external_campaign_id'], row['external_placement_id'], row['external_ad_set_id'], row['external_ad_id']) class NewCustomers1dv7dc(CommonBase7Days): __tablename__ = 'new_customers_1dv_7dc' class Purchases1dv7dc(CommonBase7Days): __tablename__ = 'purchases_1dv_7dc' class CommonBase30Days(db_conn.get_base()): __abstract__ = True id = Column(String(32), primary_key=True) brand = Column(String(2)) report_date = Column(Date) campaign_name = Column(String(200)) site_name = Column(String(50)) publisher_name = Column(String(50)) external_campaign_id = Column(String(200)) external_site_id = Column(String(100)) impressions = Column(Integer) clicks = Column(Integer) cost = Column(Numeric(scale=2, precision=10, asdecimal=True)) conversion_ec = Column(Numeric(scale=8, precision=15, asdecimal=True)) conversion_lc = Column(Integer) @staticmethod def calculate_primary_key(row, brand): return db_conn.get_hash_id(brand, row['report_date'], row['external_campaign_id'], row['campaign_name'], row['site_name']) class NewCustomers30dv30dc(CommonBase30Days):     __tablename__ = 'new_customers_30dv_30dc' class Purchases30dv30dc(CommonBase30Days): __tablename__ = 'purchases_30dv_30dc'"

print("False")
print(bool(x1))
print(bool(x2))
print(bool(x3))
print("Unknown")
